<UserControl
    x:Class="Dynamo.Views.WorkspaceView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="clr-namespace:Dynamo.Controls"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:p="clr-namespace:Dynamo.Wpf.Properties"
    xmlns:ui="clr-namespace:Dynamo.UI.Controls"
    xmlns:viewmodels="clr-namespace:Dynamo.ViewModels"
    xmlns:views="clr-namespace:Dynamo.Views"
    d:DesignHeight="300"
    d:DesignWidth="300"
    AllowDrop="True"
    Drop="OnWorkspaceDrop"
    IsHitTestVisible="{Binding IsCurrentSpace}"
    MouseLeftButtonDown="OnMouseLeftButtonDown"
    MouseMove="OnMouseMove"
    MouseUp="OnMouseRelease"
    PreviewMouseLeftButtonDown="OnPreviewMouseLeftButtonDown"
    mc:Ignorable="d">

    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Dynamo.Wpf;component/Themes/Modern/DynamoModern.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <Style x:Key="WorkspaceContextMenuStyle" TargetType="{x:Type ItemsControl}">
                <Setter Property="SnapsToDevicePixels" Value="True" />
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="Grid.IsSharedSizeScope" Value="true" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ItemsControl}">
                            <Border>
                                <StackPanel
                                    Name="ContextMenuPanel"
                                    Height="{Binding ElementName=MenuItems, Path=ActualHeight, Converter={StaticResource WorkspaceContextMenuHeightConverter}}"
                                    Margin="8,4,8,8">
                                    <ui:InCanvasSearchControl
                                        Width="{Binding ElementName=ContextMenuPanel, Path=ActualWidth}"
                                        DataContext="{Binding InCanvasSearchViewModel}"
                                        RequestShowInCanvasSearch="ShowHideContextMenu" />
                                    <Border
                                        Name="MenuItems"
                                        Padding="0,3,0,3"
                                        Background="#666666"
                                        BorderBrush="#bbbbbb"
                                        BorderThickness="0">
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                                        <Border.Style>
                                            <Style TargetType="{x:Type Border}">
                                                <Setter Property="Visibility" Value="Collapsed" />
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Path=InCanvasSearchViewModel.SearchRootCategories.Count}" Value="0">
                                                        <Setter Property="Visibility" Value="Visible" />
                                                    </DataTrigger>

                                                    <DataTrigger Binding="{Binding Path=InCanvasSearchViewModel.CurrentMode, Converter={StaticResource LibraryViewModeToBoolConverter}}" Value="True">
                                                        <Setter Property="Visibility" Value="Visible" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Border.Style>
                                    </Border>
                                </StackPanel>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="WorkspaceContextMenuStylePopup" TargetType="{x:Type Popup}">
                <EventSetter Event="PreviewKeyDown" Handler="OnInCanvasSearchContextMenuKeyDown" />
                <EventSetter Event="PreviewMouseUp" Handler="OnInCanvasSearchContextMenuMouseUp" />
                <EventSetter Event="PreviewMouseDown" Handler="OnInCanvasSearchContextMenuMouseDown" />
            </Style>
            <DataTemplate x:Key="DraggedSelectionTemplate">
                <ItemsControl ItemsSource="{Binding}">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <Canvas />
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                    <ItemsControl.ItemContainerStyle>
                        <Style TargetType="ContentPresenter">
                            <Setter Property="Canvas.Left" Value="{Binding Left}" />
                            <Setter Property="Canvas.Top" Value="{Binding Top}" />
                        </Style>
                    </ItemsControl.ItemContainerStyle>
                </ItemsControl>
            </DataTemplate>
        </ResourceDictionary>

    </UserControl.Resources>

    <Grid
        Name="outerCanvas"
        HorizontalAlignment="Stretch"
        VerticalAlignment="Stretch"
        ClipToBounds="True"
        MouseDown="OnCanvasMouseDown"
        PreviewMouseDown="OnCanvasClicked">

        <!--  Infinite grid view should not be hittable by mouse  -->

        <controls:InfiniteGridView x:Name="infiniteGridView" IsHitTestVisible="False">
            <controls:InfiniteGridView.Style>
                <Style TargetType="controls:InfiniteGridView">
                    <Setter Property="Visibility" Value="Collapsed" />
                    <Style.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=DataContext.PreferenceSettings.IsBackgroundGridVisible, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}" Value="True" />
                                <Condition Binding="{Binding Path=DataContext.BackgroundPreviewViewModel.Active, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" Value="Visible" />
                        </MultiDataTrigger>
                    </Style.Triggers>
                </Style>
            </controls:InfiniteGridView.Style>
        </controls:InfiniteGridView>

        <!--  Assigning a ZoomBorder.Background so that it can receive mouse input  -->

        <controls:ZoomBorder
            x:Name="zoomBorder"
            Background="Transparent"
            BorderThickness="0"
            ClipToBounds="True"
            Cursor="{Binding CurrentCursor}"
            ForceCursor="{Binding IsCursorForced}">

            <controls:ZoomBorder.IsHitTestVisible>
                <Binding
                    Converter="{StaticResource InverseBooleanConverter}"
                    Path="DataContext.BackgroundPreviewViewModel.CanNavigateBackground"
                    RelativeSource="{RelativeSource FindAncestor,
                                                    AncestorType={x:Type TabControl}}" />
            </controls:ZoomBorder.IsHitTestVisible>

            <ItemsControl Name="WorkspaceElements" ItemsSource="{Binding WorkspaceElements}">

                <!--  Resources for the ItemsControl can now be found in DataTemplates.xml  -->

                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <controls:DragCanvas
                            x:Name="DragCanvas"
                            Width="0"
                            Height="0"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Top"
                            IsItemsHost="True"
                            Loaded="workBench_OnLoaded"
                            UseLayoutRounding="True"
                            Visibility="Visible">
                            <Canvas.Background>
                                <SolidColorBrush Color="Transparent" />
                            </Canvas.Background>
                            <Canvas.Opacity>
                                <Binding
                                    Converter="{StaticResource NavigationToOpacityConverter}"
                                    Path="DataContext.BackgroundPreviewViewModel.CanNavigateBackground"
                                    RelativeSource="{RelativeSource FindAncestor,
                                                                    AncestorType={x:Type controls:DynamoView}}" />
                            </Canvas.Opacity>
                        </controls:DragCanvas>
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>

                <ItemsControl.ItemContainerStyle>
                    <Style TargetType="ContentPresenter">
                        <Setter Property="Canvas.Left" Value="{Binding Left}" />
                        <Setter Property="Canvas.Top" Value="{Binding Top}" />
                        <Setter Property="Panel.ZIndex" Value="{Binding ZIndex}" />
                    </Style>
                </ItemsControl.ItemContainerStyle>

            </ItemsControl>

        </controls:ZoomBorder>

        <Canvas
            Name="selectionCanvas"
            HorizontalAlignment="Stretch"
            VerticalAlignment="Stretch">
            <Rectangle
                x:Name="selectionBox"
                IsHitTestVisible="False"
                Stroke="Black"
                StrokeThickness="1"
                Visibility="Collapsed" />
        </Canvas>

        <StackPanel
            Name="viewControlPanel"
            Margin="4"
            HorizontalAlignment="Right"
            VerticalAlignment="Top"
            Orientation="Vertical">

            <StackPanel
                Name="statusBarPanel"
                Height="Auto"
                HorizontalAlignment="Right"
                VerticalAlignment="Top"
                Orientation="Horizontal">
                <StackPanel.Visibility>
                    <Binding
                        Converter="{StaticResource BooleanToVisibilityConverter}"
                        Path="DataContext.BackgroundPreviewViewModel.Active"
                        RelativeSource="{RelativeSource FindAncestor,
                                                        AncestorType={x:Type controls:DynamoView}}" />
                </StackPanel.Visibility>
                <ui:ImageCheckBox
                    Width="56"
                    Height="30"
                    Margin="4,4,0,4"
                    CheckImage="/Dynamo.Wpf;component/UI/Images/Canvas/canvas-button-geom-check.png"
                    StateImage="/Dynamo.Wpf;component/UI/Images/Canvas/canvas-button-geom-states.png">
                    <ui:ImageCheckBox.ToolTip>
                        <ToolTip
                            Width="200"
                            Content="{x:Static p:Resources.InCanvasGeomButtonToolTip}"
                            Style="{StaticResource GenericToolTipLight}" />
                    </ui:ImageCheckBox.ToolTip>
                    <ui:ImageCheckBox.IsChecked>
                        <Binding Path="DataContext.BackgroundPreviewViewModel.CanNavigateBackground" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}" />
                    </ui:ImageCheckBox.IsChecked>
                </ui:ImageCheckBox>
                <ui:ImageCheckBox
                    Width="55"
                    Height="30"
                    Margin="0,4,0,4"
                    CheckImage="/Dynamo.Wpf;component/UI/Images/Canvas/canvas-button-node-check.png"
                    StateImage="/Dynamo.Wpf;component/UI/Images/Canvas/canvas-button-node-states.png">
                    <ui:ImageCheckBox.ToolTip>
                        <ToolTip Content="{x:Static p:Resources.InCanvasNodeButtonToolTip}" Style="{StaticResource GenericToolTipLight}" />
                    </ui:ImageCheckBox.ToolTip>
                    <ui:ImageCheckBox.IsChecked>
                        <Binding
                            Converter="{StaticResource InverseBooleanConverter}"
                            Path="DataContext.BackgroundPreviewViewModel.CanNavigateBackground"
                            RelativeSource="{RelativeSource FindAncestor,
                                                            AncestorType={x:Type controls:DynamoView}}" />
                    </ui:ImageCheckBox.IsChecked>
                </ui:ImageCheckBox>
            </StackPanel>

            <ui:ImageButton
                Width="30"
                Height="28"
                HorizontalAlignment="Right"
                StateImage="/Dynamo.Wpf;component/UI/Images/Canvas/canvas-button-fit-view-states.png">
                <ui:ImageButton.ToolTip>
                    <ToolTip Content="{x:Static p:Resources.InCanvasFitViewButtonToolTip}" Style="{StaticResource GenericToolTipLight}" />
                </ui:ImageButton.ToolTip>
                <ui:ImageButton.Command>
                    <Binding Path="DataContext.FitViewCommand" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}" />
                </ui:ImageButton.Command>
            </ui:ImageButton>

            <ui:ImageRepeatButton
                Width="30"
                Height="24"
                HorizontalAlignment="Right"
                StateImage="/Dynamo.Wpf;component/UI/Images/Canvas/canvas-button-zoom-in-states.png">
                <ui:ImageRepeatButton.ToolTip>
                    <ToolTip Content="{x:Static p:Resources.InCanvasZoomInButtonToolTip}" Style="{StaticResource GenericToolTipLight}" />
                </ui:ImageRepeatButton.ToolTip>
                <ui:ImageRepeatButton.Command>
                    <Binding Path="DataContext.ZoomInCommand" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}" />
                </ui:ImageRepeatButton.Command>
            </ui:ImageRepeatButton>

            <ui:ImageRepeatButton
                Width="30"
                Height="28"
                HorizontalAlignment="Right"
                StateImage="/Dynamo.Wpf;component/UI/Images/Canvas/canvas-button-zoom-out-states.png">
                <ui:ImageRepeatButton.ToolTip>
                    <ToolTip Content="{x:Static p:Resources.InCanvasZoomOutButtonToolTip}" Style="{StaticResource GenericToolTipLight}" />
                </ui:ImageRepeatButton.ToolTip>
                <ui:ImageRepeatButton.Command>
                    <Binding Path="DataContext.ZoomOutCommand" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}" />
                </ui:ImageRepeatButton.Command>
            </ui:ImageRepeatButton>

            <ui:ImageCheckBox
                Width="30"
                Height="30"
                HorizontalAlignment="Right"
                CheckImage="/Dynamo.Wpf;component/UI/Images/Canvas/canvas-button-pan-check.png"
                StateImage="/Dynamo.Wpf;component/UI/Images/Canvas/canvas-button-pan-states.png">
                <ui:ImageCheckBox.ToolTip>
                    <ToolTip Content="{x:Static p:Resources.InCanvasPanButtonToolTip}" Style="{StaticResource GenericToolTipLight}" />
                </ui:ImageCheckBox.ToolTip>
                <ui:ImageCheckBox.Command>
                    <Binding Path="DataContext.BackgroundPreviewViewModel.TogglePanCommand" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}" />
                </ui:ImageCheckBox.Command>
                <ui:ImageCheckBox.IsChecked>
                    <Binding Mode="OneWay" Path="IsPanning" />
                </ui:ImageCheckBox.IsChecked>
            </ui:ImageCheckBox>

            <ui:ImageCheckBox
                Width="30"
                Height="30"
                HorizontalAlignment="Right"
                CheckImage="/Dynamo.Wpf;component/UI/Images/Canvas/canvas-button-orbit-check.png"
                StateImage="/Dynamo.Wpf;component/UI/Images/Canvas/canvas-button-orbit-states.png">
                <ui:ImageCheckBox.ToolTip>
                    <ToolTip Content="{x:Static p:Resources.InCanvasOrbitButtonToolTip}" Style="{StaticResource GenericToolTipLight}" />
                </ui:ImageCheckBox.ToolTip>
                <ui:ImageCheckBox.Command>
                    <Binding Path="DataContext.BackgroundPreviewViewModel.ToggleOrbitCommand" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}" />
                </ui:ImageCheckBox.Command>
                <ui:ImageCheckBox.IsChecked>
                    <Binding Mode="OneWay" Path="IsOrbiting" />
                </ui:ImageCheckBox.IsChecked>
                <ui:ImageCheckBox.Visibility>
                    <Binding
                        Converter="{StaticResource BooleanToVisibilityConverter}"
                        ConverterParameter="Collapse"
                        Path="DataContext.BackgroundPreviewViewModel.CanNavigateBackground"
                        RelativeSource="{RelativeSource FindAncestor,
                                                        AncestorType={x:Type controls:DynamoView}}" />
                </ui:ImageCheckBox.Visibility>
            </ui:ImageCheckBox>

            <!--  Working Range control  -->
            <ui:ImageRepeatButton
                x:Name="geometryScalingButton"
                Width="30"
                Height="30"
                HorizontalAlignment="Right"
                Click="OnGeometryScaling_Click"
                StateImage="/Dynamo.Wpf;component/UI/Images/Canvas/canvas-button-geometry-scaling.png">
                <ui:ImageRepeatButton.ToolTip>
                    <ToolTip Content="{x:Static p:Resources.InCanvasGeometryScalingToolTip}" Style="{StaticResource GenericToolTipLight}" />
                </ui:ImageRepeatButton.ToolTip>
            </ui:ImageRepeatButton>
        </StackPanel>

        <Popup
            Name="PortContextMenu"
            AllowsTransparency="True"
            IsOpen="False"
            Placement="Custom"
            StaysOpen="True">
            <Grid>
                <Grid.Resources>
                    <DataTemplate DataType="{x:Type viewmodels:InPortViewModel}">
                        <ui:InPortContextMenu RequestShowPortContextMenu="ShowHidePortContextMenu" />
                    </DataTemplate>
                    <DataTemplate DataType="{x:Type viewmodels:OutPortViewModel}">
                        <ui:OutPortContextMenu RequestShowPortContextMenu="ShowHidePortContextMenu" />
                    </DataTemplate>
                </Grid.Resources>
                <ContentPresenter x:Name="PortContextMenuContent" Content="{Binding}" />
            </Grid>
        </Popup>

        <Popup
            Name="InCanvasSearchBar"
            AllowsTransparency="True"
            DataContext="{Binding InCanvasSearchViewModel}"
            IsOpen="False"
            Placement="MousePoint"
            StaysOpen="True">
            <ui:InCanvasSearchControl RequestShowInCanvasSearch="ShowHideInCanvasControl" />
        </Popup>

        <Popup
            Name="NodeAutoCompleteSearchBar"
            AllowsTransparency="True"
            DataContext="{Binding NodeAutoCompleteSearchViewModel}"
            IsOpen="False"
            Placement="Custom"
            StaysOpen="True">
            <ui:NodeAutoCompleteSearchControl RequestShowNodeAutoCompleteSearch="ShowHideNodeAutoCompleteControl" />
        </Popup>

        <Popup
            Name="ContextMenuPopup"
            AllowsTransparency="True"
            Closed="OnContextMenuClosed"
            Opened="OnContextMenuOpened"
            Placement="MousePoint"
            StaysOpen="True"
            Style="{StaticResource WorkspaceContextMenuStylePopup}">
            <Popup.Resources>
                <Style TargetType="{x:Type MenuItem}">
                    <Setter Property="IsChecked" Value="{DynamicResource IsChecked}" />
                    <Setter Property="HorizontalAlignment" Value="Left" />
                    <Setter Property="Height" Value="28" />
                    <Setter Property="MinWidth" Value="250" />
                    <Setter Property="Padding" Value="10,0,10,0" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type MenuItem}">
                                <DockPanel
                                    x:Name="dockPanel"
                                    HorizontalAlignment="Stretch"
                                    Background="Transparent"
                                    SnapsToDevicePixels="true">
                                    <Label
                                        x:Name="checkBox"
                                        Margin="2,0,-20,0"
                                        HorizontalAlignment="Left"
                                        VerticalAlignment="Center"
                                        HorizontalContentAlignment="Center"
                                        VerticalContentAlignment="Center"
                                        Content="✓"
                                        DockPanel.Dock="Left"
                                        FontSize="9px"
                                        Foreground="White"
                                        Visibility="Collapsed" />
                                    <ContentPresenter
                                        x:Name="ContentPresenter"
                                        Margin="{TemplateBinding Padding}"
                                        VerticalAlignment="Center"
                                        ContentSource="Header"
                                        DockPanel.Dock="Left"
                                        RecognizesAccessKey="True"
                                        SnapsToDevicePixels="True"
                                        TextBlock.Foreground="#F5F5F5" />
                                </DockPanel>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter TargetName="ContentPresenter" Property="TextBlock.Opacity" Value="0.5" />
                                    </Trigger>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter TargetName="ContentPresenter" Property="TextBlock.Foreground" Value="White" />
                                        <Setter TargetName="dockPanel" Property="Background" Value="{StaticResource NodeContextMenuBackgroundHighlight}" />
                                    </Trigger>
                                    <Trigger Property="IsMouseOver" Value="False">
                                        <Setter TargetName="dockPanel" Property="Background" Value="{StaticResource NodeContextMenuBackground}" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
                <Style TargetType="{x:Type controls:ParentMenuItem}">
                    <Setter Property="IsChecked" Value="{DynamicResource IsChecked}" />
                    <Setter Property="HorizontalAlignment" Value="Left" />
                    <Setter Property="Height" Value="28" />
                    <Setter Property="MinWidth" Value="250" />
                    <Setter Property="Padding" Value="10,0,10,0" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type MenuItem}">
                                <DockPanel
                                    x:Name="dockPanel"
                                    HorizontalAlignment="Stretch"
                                    Background="Transparent"
                                    SnapsToDevicePixels="true">
                                    <Label
                                        x:Name="checkBox"
                                        Margin="2,0,-20,0"
                                        HorizontalAlignment="Left"
                                        VerticalAlignment="Center"
                                        HorizontalContentAlignment="Center"
                                        VerticalContentAlignment="Center"
                                        Content="✓"
                                        DockPanel.Dock="Left"
                                        FontSize="9px"
                                        Foreground="White"
                                        Visibility="Collapsed" />
                                    <ContentPresenter
                                        x:Name="ContentPresenter"
                                        Margin="{TemplateBinding Padding}"
                                        VerticalAlignment="Center"
                                        ContentSource="Header"
                                        DockPanel.Dock="Left"
                                        RecognizesAccessKey="True"
                                        SnapsToDevicePixels="True"
                                        TextBlock.Foreground="#F5F5F5" />
                                    <Label
                                        x:Name="subMenuArrow"
                                        Margin="0,0,8,7"
                                        Padding="0"
                                        VerticalAlignment="Center"
                                        Content="&gt;"
                                        DockPanel.Dock="Right"
                                        FontFamily="宋体"
                                        FontSize="13px"
                                        Foreground="{StaticResource Blue300Brush}">
                                        <Label.RenderTransform>
                                            <ScaleTransform ScaleX="1" ScaleY="1.5" />
                                        </Label.RenderTransform>
                                        <Label.Style>
                                            <Style TargetType="{x:Type Label}">
                                                <Setter Property="Visibility" Value="Hidden" />
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuItem}}, Path=HasItems}" Value="True">
                                                        <Setter Property="Visibility" Value="Visible" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Label.Style>
                                    </Label>
                                    <Popup
                                        x:Name="PART_Popup"
                                        AllowsTransparency="true"
                                        Focusable="false"
                                        IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                        Placement="Right"
                                        VerticalOffset="-2">
                                        <Border
                                            Background="{TemplateBinding Background}"
                                            BorderBrush="Transparent"
                                            BorderThickness="0">
                                            <ScrollViewer
                                                x:Name="SubMenuScrollViewer"
                                                CanContentScroll="true"
                                                Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer,
                                                                                              TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                                    <ItemsPresenter
                                                        x:Name="ItemsPresenter"
                                                        Grid.IsSharedSizeScope="true"
                                                        KeyboardNavigation.DirectionalNavigation="Cycle"
                                                        KeyboardNavigation.TabNavigation="Cycle"
                                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                                </Grid>
                                            </ScrollViewer>
                                        </Border>
                                    </Popup>
                                </DockPanel>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter TargetName="ContentPresenter" Property="TextBlock.Opacity" Value="0.5" />
                                    </Trigger>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter TargetName="ContentPresenter" Property="TextBlock.Foreground" Value="White" />
                                        <Setter TargetName="dockPanel" Property="Background" Value="{StaticResource NodeContextMenuBackgroundHighlight}" />
                                    </Trigger>
                                    <Trigger Property="IsMouseOver" Value="False">
                                        <Setter TargetName="dockPanel" Property="Background" Value="{StaticResource NodeContextMenuBackground}" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Popup.Resources>
            <ItemsControl Style="{StaticResource WorkspaceContextMenuStyle}">
                <ItemsControl.Resources>
                    <Style TargetType="Separator">
                        <Setter Property="OverridesDefaultStyle" Value="true" />
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Separator}">
                                    <Border
                                        Height="1"
                                        Margin="0,8,0,8"
                                        Background="#757575" />
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </ItemsControl.Resources>
                <ItemsControl.Items>
                    <controls:ParentMenuItem x:Name="WorkspaceLacingMenu" Header="{x:Static p:Resources.ContextMenuLacing}">

                        <!--  Lacing: Auto  -->
                        <MenuItem
                            Command="{Binding Path=SetArgumentLacingCommand}"
                            CommandParameter="Auto"
                            Header="{x:Static p:Resources.ContextMenuLacingAuto}"
                            IsCheckable="True">
                            <MenuItem.IsChecked>
                                <Binding
                                    Converter="{StaticResource EnumToBoolConverter}"
                                    ConverterParameter="Auto"
                                    Mode="OneWay"
                                    Path="SelectionArgumentLacing" />
                            </MenuItem.IsChecked>
                        </MenuItem>

                        <!--  Lacing: Shortest  -->
                        <MenuItem
                            Command="{Binding Path=SetArgumentLacingCommand}"
                            CommandParameter="Shortest"
                            Header="{x:Static p:Resources.ContextMenuLacingShortest}"
                            IsCheckable="True">
                            <MenuItem.IsChecked>
                                <Binding
                                    Converter="{StaticResource EnumToBoolConverter}"
                                    ConverterParameter="Shortest"
                                    Mode="OneWay"
                                    Path="SelectionArgumentLacing" />
                            </MenuItem.IsChecked>
                        </MenuItem>

                        <!--  Lacing: Longest  -->
                        <MenuItem
                            Command="{Binding Path=SetArgumentLacingCommand}"
                            CommandParameter="Longest"
                            Header="{x:Static p:Resources.ContextMenuLacingLongest}"
                            IsCheckable="True">
                            <MenuItem.IsChecked>
                                <Binding
                                    Converter="{StaticResource EnumToBoolConverter}"
                                    ConverterParameter="Longest"
                                    Mode="OneWay"
                                    Path="SelectionArgumentLacing" />
                            </MenuItem.IsChecked>
                        </MenuItem>

                        <!--  Lacing: Cross Product  -->
                        <MenuItem
                            Command="{Binding Path=SetArgumentLacingCommand}"
                            CommandParameter="CrossProduct"
                            Header="{x:Static p:Resources.ContextMenuLacingCrossProduct}"
                            IsCheckable="True">
                            <MenuItem.IsChecked>
                                <Binding
                                    Converter="{StaticResource EnumToBoolConverter}"
                                    ConverterParameter="CrossProduct"
                                    Mode="OneWay"
                                    Path="SelectionArgumentLacing" />
                            </MenuItem.IsChecked>
                        </MenuItem>
                    </controls:ParentMenuItem>

                    <!--  Show Geometry Preview  -->
                    <MenuItem
                        Command="{Binding Path=ShowHideAllGeometryPreviewCommand}"
                        CommandParameter="true"
                        Header="{x:Static p:Resources.ContextMenuShowGeometry}"
                        IsEnabled="{Binding Path=IsGeometryOperationEnabled}"
                        Visibility="{Binding Path=AnyNodeVisible, Converter={StaticResource InverseBoolToVisibilityCollapsedConverter}}" />

                    <!--  Hide Geometry Preview  -->
                    <MenuItem
                        Command="{Binding Path=ShowHideAllGeometryPreviewCommand}"
                        CommandParameter="false"
                        Header="{x:Static p:Resources.ContextMenuHideGeometry}"
                        IsEnabled="{Binding Path=IsGeometryOperationEnabled}"
                        Visibility="{Binding Path=AnyNodeVisible, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />

                    <!--  Align Menu  -->
                    <controls:ParentMenuItem x:Name="Align" Header="{x:Static p:Resources.DynamoViewEditMenuAlignSelection}">
                        <MenuItem Command="{Binding AlignSelectedCommand}" CommandParameter="HorizontalCenter">
                            <MenuItem.Header>
                                <StackPanel Orientation="Horizontal">
                                    <Image
                                        Width="14"
                                        Height="14"
                                        Source="/Dynamo.Wpf;component/UI/Images/Alignment/align_x_average.png" />
                                    <Label Content="{x:Static p:Resources.DynamoViewEditMenuAlignXAverage}" Foreground="White" />
                                </StackPanel>
                            </MenuItem.Header>
                        </MenuItem>
                        <MenuItem Command="{Binding AlignSelectedCommand}" CommandParameter="HorizontalLeft">
                            <MenuItem.Header>
                                <StackPanel Orientation="Horizontal">
                                    <Image
                                        Width="14"
                                        Height="14"
                                        Source="/Dynamo.Wpf;component/UI/Images/Alignment/align_left.png" />
                                    <Label Content="{x:Static p:Resources.DynamoViewEditMenuAlignLeft}" Foreground="White" />
                                </StackPanel>
                            </MenuItem.Header>
                        </MenuItem>
                        <MenuItem Command="{Binding AlignSelectedCommand}" CommandParameter="HorizontalRight">
                            <MenuItem.Header>
                                <StackPanel Orientation="Horizontal">
                                    <Image
                                        Width="14"
                                        Height="14"
                                        Source="/Dynamo.Wpf;component/UI/Images/Alignment/align_right.png" />
                                    <Label Content="{x:Static p:Resources.DynamoViewEditMenuAlignRight}" Foreground="White" />
                                </StackPanel>
                            </MenuItem.Header>
                        </MenuItem>
                        <MenuItem Command="{Binding AlignSelectedCommand}" CommandParameter="VerticalCenter">
                            <MenuItem.Header>
                                <StackPanel Orientation="Horizontal">
                                    <Image
                                        Width="14"
                                        Height="14"
                                        Source="/Dynamo.Wpf;component/UI/Images/Alignment/align_y_average.png" />
                                    <Label Content="{x:Static p:Resources.DynamoViewEditMenuAlignYAverage}" Foreground="White" />
                                </StackPanel>
                            </MenuItem.Header>
                        </MenuItem>
                        <MenuItem Command="{Binding AlignSelectedCommand}" CommandParameter="VerticalTop">
                            <MenuItem.Header>
                                <StackPanel Orientation="Horizontal">
                                    <Image
                                        Width="14"
                                        Height="14"
                                        Source="/Dynamo.Wpf;component/UI/Images/Alignment/align_top.png" />
                                    <Label Content="{x:Static p:Resources.DynamoViewEditMenuAlignTop}" Foreground="White" />
                                </StackPanel>
                            </MenuItem.Header>
                        </MenuItem>
                        <MenuItem Command="{Binding AlignSelectedCommand}" CommandParameter="VerticalBottom">
                            <MenuItem.Header>
                                <StackPanel Orientation="Horizontal">
                                    <Image
                                        Width="14"
                                        Height="14"
                                        Source="/Dynamo.Wpf;component/UI/Images/Alignment/align_bottom.png" />
                                    <Label Content="{x:Static p:Resources.DynamoViewEditMenuAlighBottom}" Foreground="White" />
                                </StackPanel>
                            </MenuItem.Header>
                        </MenuItem>
                        <MenuItem Command="{Binding AlignSelectedCommand}" CommandParameter="VerticalDistribute">
                            <MenuItem.Header>
                                <StackPanel Orientation="Horizontal">
                                    <Image
                                        Width="14"
                                        Height="14"
                                        Source="/Dynamo.Wpf;component/UI/Images/Alignment/align_y_distribute.png" />
                                    <Label Content="{x:Static p:Resources.DynamoViewEditMenuAlignYDistribute}" Foreground="White" />
                                </StackPanel>
                            </MenuItem.Header>
                        </MenuItem>
                        <MenuItem Command="{Binding AlignSelectedCommand}" CommandParameter="HorizontalDistribute">
                            <MenuItem.Header>
                                <StackPanel Orientation="Horizontal">
                                    <Image
                                        Width="14"
                                        Height="14"
                                        Source="/Dynamo.Wpf;component/UI/Images/Alignment/align_X_distribute.png" />
                                    <Label Content="{x:Static p:Resources.DynamoViewEditMenuAlignXDistribute}" Foreground="White" />
                                </StackPanel>
                            </MenuItem.Header>
                        </MenuItem>
                    </controls:ParentMenuItem>

                    <!--  Create Custom Node  -->
                    <MenuItem
                        Command="{Binding NodeFromSelectionCommand}"
                        CommandTarget="{Binding ElementName=_this}"
                        Header="{x:Static p:Resources.ContextMenuNodesFromSelection}" />

                    <!--  Node to Code  -->
                    <MenuItem
                        Command="{Binding NodeToCodeCommand}"
                        Header="{x:Static p:Resources.ContextMenuNodeToCode}"
                        Visibility="{Binding Path=CanRunNodeToCode, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />

                    <!--  Create Group  -->
                    <MenuItem Command="{Binding DynamoViewModel.AddAnnotationCommand}" Header="{x:Static p:Resources.ContextCreateGroupFromSelection}" />

                    <!--  Align Menu  -->
                    <MenuItem
                        Command="{Binding FindNodesFromSelectionCommand}"
                        Header="{x:Static p:Resources.ContextMenuNodesFromGeometry}"
                        Visibility="{Binding Path=CanFindNodesFromElements, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />

                    <!--  Node Connections Menu  -->
                    <controls:ParentMenuItem x:Name="NodeConnectionsMenu" Header="{x:Static p:Resources.ContextMenuNodeConnections}">

                        <!--  Connections: Show All Wires  -->
                        <MenuItem
                            Command="{Binding Path=ShowAllWiresCommand}"
                            Header="{x:Static p:Resources.ContextMenuConnectionsShowAll}"
                            IsCheckable="True">
                            <MenuItem.IsChecked>
                                <Binding
                                    Converter="{StaticResource EnumToBoolConverter}"
                                    ConverterParameter="Auto"
                                    Mode="OneWay"
                                    Path="SelectionArgumentLacing" />
                            </MenuItem.IsChecked>
                        </MenuItem>

                        <!--  Connections: Hide All Wires  -->
                        <MenuItem
                            Command="{Binding Path=HideAllWiresCommand}"
                            Header="{x:Static p:Resources.ContextMenuConnectionsHideAll}"
                            IsCheckable="True">
                            <MenuItem.IsChecked>
                                <Binding
                                    Converter="{StaticResource EnumToBoolConverter}"
                                    ConverterParameter="Shortest"
                                    Mode="OneWay"
                                    Path="SelectionArgumentLacing" />
                            </MenuItem.IsChecked>
                        </MenuItem>

                    </controls:ParentMenuItem>

                    <Separator Visibility="{Binding Path=CanCopyOrPaste, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />

                    <!--  Copy  -->
                    <MenuItem
                        Command="{Binding CopyCommand}"
                        Header="{x:Static p:Resources.ContextMenuCopy}"
                        Visibility="{Binding Path=CanCopy, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />
                    <!--  Paste  -->
                    <MenuItem
                        Command="{Binding PasteCommand}"
                        Header="{x:Static p:Resources.ContextMenuPaste}"
                        Visibility="{Binding Path=CanPaste, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />

                    <Separator Visibility="{Binding Path=IsHomeSpace, Converter={StaticResource InverseBoolToVisibilityCollapsedConverter}}" />

                    <!--  Edit Custom Node  -->
                    <MenuItem
                        Click="WorkspacePropertyEditClick"
                        Header="{x:Static p:Resources.ContextMenuEditCustomNodeProperty}"
                        Visibility="{Binding Path=IsHomeSpace, Converter={StaticResource InverseBoolToVisibilityCollapsedConverter}}" />

                    <!--  Publish  -->
                    <MenuItem
                        Name="Publish"
                        Command="{Binding DynamoViewModel.PublishCurrentWorkspaceCommand}"
                        Header="{x:Static p:Resources.ContextMenuPublishCustomNode}"
                        Visibility="{Binding Path=IsHomeSpace, Converter={StaticResource InverseBoolToVisibilityCollapsedConverter}}" />

                    <Separator />

                    <!--  Switch Python  -->
                    <controls:ParentMenuItem
                        x:Name="PythonEngineMenu"
                        Header="{x:Static p:Resources.UpdateAllPythonEngineMainMenuHeader}"
                        Visibility="{Binding Path=CanUpdatePythonEngine, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />

                    <!--  Switch to Geometry View  -->
                    <MenuItem
                        Command="{Binding DynamoViewModel.BackgroundPreviewViewModel.ToggleCanNavigateBackgroundCommand}"
                        Header="{x:Static p:Resources.ContextMenuGeometryView}"
                        Visibility="{Binding DynamoViewModel.BackgroundPreviewViewModel.Active, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />

                    <!--  Pan  -->
                    <MenuItem Command="{Binding DynamoViewModel.BackgroundPreviewViewModel.TogglePanCommand}" Header="{x:Static p:Resources.ContextMenuPan}">
                        <MenuItem.IsChecked>
                            <Binding Mode="OneWay" Path="DynamoViewModel.BackgroundPreviewViewModel.IsPanning" />
                        </MenuItem.IsChecked>
                    </MenuItem>

                    <!--  Fit to Screen  -->
                    <MenuItem Command="{Binding DynamoViewModel.FitViewCommand}" Header="{x:Static p:Resources.ContextMenuFitToScreen}" />

                </ItemsControl.Items>
            </ItemsControl>
        </Popup>
    </Grid>
</UserControl>
