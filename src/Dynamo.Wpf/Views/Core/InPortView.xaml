<UserControl
    x:Class="Dynamo.Controls.InPortView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:dynui="clr-namespace:Dynamo.UI.Controls"
    xmlns:interactivity="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:local="clr-namespace:Dynamo.Controls"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    d:DesignHeight="450"
    d:DesignWidth="800"
    mc:Ignorable="d">
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Dynamo.Wpf;component/Themes/Modern/DynamoConverters.xaml" />
                <ResourceDictionary Source="/Dynamo.Wpf;component/Themes/Modern/Fonts.xaml" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </UserControl.Resources>
    <Grid>
        <Grid.LayoutTransform>
            <RotateTransform Angle="{Binding PortAlignment,Converter={StaticResource InPortAlignmentConverter}}"/>
        </Grid.LayoutTransform>
        <Grid Name="PortSnapingGrid">
            <!--  Enables Port Snapping  -->
            <Rectangle
                x:Name="PortSnapping"
                Margin="-25,0,0,0"
                Canvas.ZIndex="1"
                IsHitTestVisible="{Binding IsHitTestVisible}"
                SnapsToDevicePixels="True">
                <interactivity:Interaction.Triggers>
                    <interactivity:EventTrigger EventName="MouseEnter">
                        <interactivity:InvokeCommandAction Command="{Binding Path=MouseEnterCommand}" CommandParameter="{Binding}" />
                    </interactivity:EventTrigger>
                    <interactivity:EventTrigger EventName="MouseLeave">
                        <interactivity:InvokeCommandAction Command="{Binding Path=MouseLeaveCommand}" CommandParameter="{Binding}" />
                    </interactivity:EventTrigger>
                </interactivity:Interaction.Triggers>
            </Rectangle>
        </Grid>
        <Grid
            Name="MainGrid"
            Background="Transparent"
            IsHitTestVisible="True">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Name="ValueMarkerColumn" Width="5px" />
                <ColumnDefinition Name="GapBetweenValueMarkerAndPortName" Width="6px" />
                <ColumnDefinition Name="PortNameColumn" />
                <ColumnDefinition Name="GapBetweenPortNameAndUseLevelSpinner" Width="6px" />
                <ColumnDefinition Name="UseLevelSpinnerColumn" Width="Auto" />
                <ColumnDefinition Name="ChevronColumn" Width="Auto" />
            </Grid.ColumnDefinitions>

            <interactivity:Interaction.Triggers>
                <!--  Bind Connect command to left click  -->
                <interactivity:EventTrigger EventName="MouseLeftButtonDown">
                    <interactivity:InvokeCommandAction Command="{Binding Path=ConnectCommand}" />
                </interactivity:EventTrigger>
                <interactivity:EventTrigger EventName="MouseRightButtonDown">
                    <interactivity:InvokeCommandAction Command="{Binding Path=NodePortContextMenuCommand}" CommandParameter="{Binding}" />
                </interactivity:EventTrigger>
            </interactivity:Interaction.Triggers>

            <!--  Bind NodeAutoComplete to double left click  -->
            <Grid.InputBindings>
                <MouseBinding Command="{Binding Path=NodeAutoCompleteCommand}" MouseAction="LeftDoubleClick" />
            </Grid.InputBindings>



            <!--  Sets the port background color  -->
            <Border
                x:Name="PortBackgroundBorder"
                Grid.ColumnSpan="6"
                Height="29px"
                Background="{Binding PortBackgroundColor, UpdateSourceTrigger=PropertyChanged}"
                BorderThickness="0"
                CornerRadius="0,11,11,0"
                IsHitTestVisible="False"
                SnapsToDevicePixels="True" />

            <!--  A small marker on the left of the port, indicating whether it's been honored  -->
            <Rectangle
                x:Name="PortValueMarker"
                Height="29px"
                VerticalAlignment="Center"
                Fill="{Binding PortValueMarkerColor, UpdateSourceTrigger=PropertyChanged}"
                IsHitTestVisible="False"
                SnapsToDevicePixels="True" />

            <!--  A rectangular marker indicating that the port has a default value  -->

            <!--  The name of this port  -->
            <TextBlock
                x:Name="PortNameTextBox"
                Grid.Column="2"
                Width="Auto"
                Margin="0,1,5,0"
                VerticalAlignment="Center"
                FontFamily="{StaticResource ArtifaktElementRegular}"
                FontSize="12px"
                Foreground="#DCDCDC"
                IsHitTestVisible="False"
                Text="{Binding Path=PortName}" />

            <!--  The small '>' marker users click on to open the port context menu  -->
            <TextBlock
                x:Name="Chevron"
                Grid.Column="5"
                Width="20px"
                Padding="0,1,1,0"
                VerticalAlignment="Center"
                FontSize="16px"
                Foreground="{StaticResource PrimaryCharcoal200Brush}"
                IsHitTestVisible="False"
                Text="&gt;"
                TextAlignment="Center"
                Visibility="{Binding UseLevelVisibility}" />

            <!--  A semi-transparent overlay which displays when users move their mouse over the port  -->
            <Border
                x:Name="MainBorderHighlightOverlay"
                Grid.ColumnSpan="6"
                Height="29px"
                BorderBrush="Transparent"
                CornerRadius="0,11,11,0"
                IsHitTestVisible="True"
                Opacity="0.2"
                SnapsToDevicePixels="True">
                <Border.Style>
                    <Style TargetType="Border">
                        <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="White" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="False">
                                <Setter Property="Background" Value="Transparent" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Border.Style>

                <Border.ToolTip>
                    <dynui:DynamoToolTip AttachmentSide="Left" Style="{DynamicResource ResourceKey=SLightToolTip}">
                        <Grid>
                            <TextBlock
                                MaxWidth="320"
                                Text="{Binding Path=ToolTipContent}"
                                TextWrapping="Wrap" />
                        </Grid>
                    </dynui:DynamoToolTip>
                </Border.ToolTip>
            </Border>

            <!--  Contains the UseLevelSpinner, letting users select List Levels etc  -->
            <Grid Grid.Column="4" Visibility="{Binding Path=UseLevels, Converter={StaticResource BooleanToVisibilityConverter}}">
                <dynui:UseLevelSpinner
                    x:Name="useLevelControl"
                    Width="50px"
                    Height="25px"
                    VerticalAlignment="Center"
                    Background="{StaticResource DarkGreyBrush}"
                    DockPanel.Dock="Right"
                    KeepListStructure="{Binding Path=ShouldKeepListStructure}"
                    Level="{Binding Path=Level, Mode=TwoWay}"
                    Visibility="{Binding UseLevelVisibility}" />
            </Grid>

            <!--  A semi-transparent overlay above the chevron, which displays when a user's mouse moves over it  -->
            <Border
                x:Name="ChevronHighlightOverlay"
                Grid.Column="5"
                Width="20px"
                Height="27px"
                CornerRadius="0,11,11,0"
                IsHitTestVisible="True"
                Visibility="{Binding UseLevelVisibility}">
                <Border.InputBindings>
                    <MouseBinding Command="{Binding Path=NodePortContextMenuCommand}" MouseAction="LeftClick" />
                </Border.InputBindings>
                <Border.Style>
                    <Style TargetType="{x:Type Border}">
                        <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#E5E2DE" />
                                <Setter Property="Opacity" Value="0.3" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="False">
                                <Setter Property="Background" Value="#E5E2DE" />
                                <Setter Property="Opacity" Value="0.0" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Border.Style>
            </Border>

            <!--  The outer border around this port  -->
            <Border
                x:Name="PortBorderBrush"
                Grid.ColumnSpan="6"
                Height="29px"
                BorderBrush="{Binding PortBorderBrushColor, UpdateSourceTrigger=PropertyChanged}"
                BorderThickness="0,1,1,1"
                CornerRadius="0,11,11,0"
                IsHitTestVisible="True"
                SnapsToDevicePixels="True" />
        </Grid>
    </Grid>

</UserControl>
