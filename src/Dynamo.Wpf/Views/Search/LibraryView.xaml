<UserControl
    x:Class="Dynamo.UI.Views.LibraryView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="clr-namespace:Dynamo.Controls"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:p="clr-namespace:Dynamo.Wpf.Properties"
    xmlns:ui="clr-namespace:Dynamo.UI"
    xmlns:uicontrols="clr-namespace:Dynamo.UI.Controls"
    xmlns:vms="clr-namespace:Dynamo.Wpf.ViewModels"
    d:DesignHeight="525"
    d:DesignWidth="350"
    mc:Ignorable="d">
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Dynamo.Wpf;component/Themes/Modern/Generic.xaml" />

            </ResourceDictionary.MergedDictionaries>

            <Style x:Key="LibraryTreeViewItem" TargetType="{x:Type TreeViewItem}">
                <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=OneWay}" />
                <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                <Setter Property="HorizontalAlignment" Value="Stretch" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TreeViewItem}">
                            <Button
                                HorizontalAlignment="Stretch"
                                MouseDoubleClick="OnExpanderButtonMouseDoubleClick"
                                MouseEnter="OnMemberMouseEnter"
                                MouseLeave="OnPopupMouseLeave"
                                PreviewMouseLeftButtonDown="OnExpanderButtonMouseLeftButtonDown"
                                PreviewMouseLeftButtonUp="OnExpanderButtonMouseLeftButtonUp"
                                PreviewMouseMove="OnExpanderButtonPreviewMouseMove">
                                <Button.Template>
                                    <ControlTemplate TargetType="Button">
                                        <ContentPresenter />
                                    </ControlTemplate>
                                </Button.Template>
                                <Border Name="Bd" BorderThickness="0">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="*" />
                                        </Grid.RowDefinitions>

                                        <Border x:Name="outerBorder" BorderBrush="{StaticResource LibraryItemHostBackground}">
                                            <Grid Name="OuterGrid" Background="Transparent" >
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto" />
                                                    <ColumnDefinition Width="*" />
                                                    <ColumnDefinition Width="Auto" />
                                                </Grid.ColumnDefinitions>

                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="Auto" />
                                                    <RowDefinition Height="*" />
                                                </Grid.RowDefinitions>

                                                <ToggleButton
                                                    x:Name="ExpanderParent"
                                                    Background="Transparent"
                                                    ClickMode="Press"
                                                    IsChecked="{Binding IsExpanded, Mode=OneWay}"
                                                    IsHitTestVisible="False"
                                                    Style="{StaticResource LibraryExpandCollapseToggleStyle}">
                                                    <ToggleButton.Margin>
                                                        <Binding Converter="{StaticResource FullCategoryNameToMarginConverter}" Path="FullCategoryName" />
                                                    </ToggleButton.Margin>
                                                </ToggleButton>

                                                <ContentPresenter
                                                    x:Name="PART_Header"
                                                    Grid.Column="1"
                                                    VerticalAlignment="Center"
                                                    ContentSource="Header" />

                                                <TextBlock
                                                    x:Name="ElementTypeText"
                                                    Grid.Column="2"
                                                    Margin="0,0,10,0"
                                                    HorizontalAlignment="Right"
                                                    VerticalAlignment="Center"
                                                    Text="{Binding Path=ElementType, Converter={StaticResource ElementTypeToShortConverter}}"
                                                    TextBlock.FontSize="10"
                                                    TextBlock.Foreground="{StaticResource NestedMemberTextColor}">
                                                    <TextBlock.Style>
                                                        <Style TargetType="{x:Type TextBlock}">
                                                            <Setter Property="Visibility" Value="Collapsed" />
                                                            <Style.Triggers>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}}" Value="True" />
                                                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=DataContext, Converter={StaticResource RootElementToBoolConverter}}" Value="True" />
                                                                    </MultiDataTrigger.Conditions>
                                                                    <MultiDataTrigger.Setters>
                                                                        <Setter Property="Visibility" Value="Visible" />
                                                                    </MultiDataTrigger.Setters>
                                                                </MultiDataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </TextBlock.Style>
                                                </TextBlock>


                                            </Grid>

                                            <Border.Style>
                                                <Style TargetType="{x:Type Border}">
                                                    <Style.Triggers>

                                                        <!--  Root element & mouse over => dark grey + light border at the bottom.  -->
                                                        <MultiDataTrigger>
                                                            <MultiDataTrigger.Conditions>
                                                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                                                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=DataContext, Converter={StaticResource RootElementToBoolConverter}}" Value="True" />
                                                            </MultiDataTrigger.Conditions>
                                                            <MultiDataTrigger.Setters>
                                                                <Setter Property="BorderThickness" Value="0,0,0,1" />
                                                                <Setter Property="Background" Value="{StaticResource RootElementOnHover}" />
                                                            </MultiDataTrigger.Setters>
                                                        </MultiDataTrigger>
                                                        <!--  Uncomment this if the tree view item need a different background color  -->
                                                        <!--  Usual element & mouse over => light grey.  -->
                                                        <!--<MultiDataTrigger>
                                                            <MultiDataTrigger.Conditions>
                                                                <Condition Binding="{Binding RelativeSource={RelativeSource Self},
                                                                                     Path=IsMouseOver}"
                                                                           Value="True" />
                                                                <Condition Binding="{Binding RelativeSource={RelativeSource Self},
                                                                                     Path=DataContext,
                                                                                     Converter={StaticResource RootElementToBoolConverter}}"
                                                                           Value="False" />
                                                            </MultiDataTrigger.Conditions>
                                                            <MultiDataTrigger.Setters>
                                                                <Setter Property="Background"
                                                                        Value="{StaticResource LibraryMemberOnHover}" />
                                                            </MultiDataTrigger.Setters>
                                                        </MultiDataTrigger>-->

                                                        <!--  Usual element & mouse not over => grey.  -->
                                                        <MultiDataTrigger>
                                                            <MultiDataTrigger.Conditions>
                                                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="False" />
                                                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=DataContext, Converter={StaticResource RootElementToBoolConverter}}" Value="False" />
                                                            </MultiDataTrigger.Conditions>
                                                            <MultiDataTrigger.Setters>
                                                                <Setter Property="Background" Value="{StaticResource LibraryItemHostBackground}" />
                                                            </MultiDataTrigger.Setters>
                                                        </MultiDataTrigger>

                                                        <!--  Root element & mouse not over => dark dark grey + light border at the bottom.  -->
                                                        <MultiDataTrigger>
                                                            <MultiDataTrigger.Conditions>
                                                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="False" />
                                                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=DataContext, Converter={StaticResource RootElementToBoolConverter}}" Value="True" />
                                                            </MultiDataTrigger.Conditions>
                                                            <MultiDataTrigger.Setters>
                                                                <Setter Property="BorderThickness" Value="0,0,0,1" />
                                                                <Setter Property="Background" Value="{StaticResource RootElementBackground}" />
                                                            </MultiDataTrigger.Setters>
                                                        </MultiDataTrigger>

                                                    </Style.Triggers>
                                                </Style>
                                            </Border.Style>
                                        </Border>

                                        <Border Grid.Row="1" Background="{StaticResource LibraryItemHostBackground}">
                                            <ItemsPresenter x:Name="ItemsHost">
                                                <ItemsPresenter.Visibility>
                                                    <Binding Converter="{StaticResource LibraryTreeItemsHostVisibilityConverter}" />
                                                </ItemsPresenter.Visibility>

                                                <ItemsPresenter.Style>
                                                    <Style TargetType="{x:Type ItemsPresenter}">
                                                        <Setter Property="Margin" Value="0,0,0,0" />

                                                        <Style.Triggers>
                                                            <DataTrigger Value="True">
                                                                <DataTrigger.Binding>
                                                                    <Binding
                                                                        Converter="{StaticResource RootElementToBoolConverter}"
                                                                        Path="DataContext"
                                                                        RelativeSource="{RelativeSource Self}" />
                                                                </DataTrigger.Binding>
                                                                <Setter Property="Margin" Value="0,3,0,3" />
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </ItemsPresenter.Style>

                                            </ItemsPresenter>
                                        </Border>
                                    </Grid>
                                </Border>
                            </Button>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsExpanded" Value="false">
                                    <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
                                </Trigger>

                                <Trigger Property="HasItems" Value="false">
                                    <Setter TargetName="ExpanderParent" Property="Visibility" Value="Collapsed" />
                                </Trigger>

                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <WrapPanel />
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
                <EventSetter Event="MouseEnter" Handler="OnMemberMouseEnter" />
                <EventSetter Event="MouseLeave" Handler="OnPopupMouseLeave" />
            </Style>



            <Style x:Key="ClassTreeViewItem" TargetType="{x:Type TreeViewItem}">
                <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=OneWay}" />
                <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                <Setter Property="HorizontalAlignment" Value="Stretch" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TreeViewItem}">

                            <Button x:Name="outerButton" HorizontalAlignment="Stretch">
                                <Button.Template>
                                    <ControlTemplate TargetType="Button">
                                        <ContentPresenter />
                                    </ControlTemplate>
                                </Button.Template>
                                <Border Name="Bd" BorderThickness="0">
                                    <Grid Name="OuterButtongrid">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="*" />
                                        </Grid.RowDefinitions>

                                        <Border BorderBrush="{StaticResource LibraryItemHostBackground}">
                                            <Grid Name="OuterGrid" Background="Transparent">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto" />
                                                    <ColumnDefinition Width="*" />
                                                    <ColumnDefinition Width="Auto" />
                                                </Grid.ColumnDefinitions>

                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="Auto" />
                                                    <RowDefinition Height="*" />
                                                </Grid.RowDefinitions>

                                                <Rectangle
                                                    x:Name="VerLn"
                                                    Width="1"
                                                    Fill="#686868"
                                                    Stroke="#c5ffba">
                                                    <Rectangle.Margin>
                                                        <MultiBinding Converter="{StaticResource TreeViewLineMarginConverter}">
                                                            <Binding ElementName="ExpanderParent" Path="Margin" />
                                                            <Binding ElementName="Expander" Path="Margin" />
                                                            <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type TreeViewItem}}" />
                                                        </MultiBinding>
                                                    </Rectangle.Margin>
                                                </Rectangle>
                                                <Rectangle
                                                    x:Name="HorLn"
                                                    Grid.RowSpan="2"
                                                    Height="1"
                                                    Fill="#686868"
                                                    Stroke="#c5ffba">
                                                    <Rectangle.Margin>
                                                        <MultiBinding Converter="{StaticResource TreeViewHLineMarginConverter}">
                                                            <Binding ElementName="VerLn" Path="Margin" />
                                                            <Binding ElementName="Expander" Path="Margin" />
                                                            <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type TreeViewItem}}" />
                                                        </MultiBinding>
                                                    </Rectangle.Margin>
                                                </Rectangle>

                                                <ToggleButton
                                                    x:Name="Expander"
                                                    Background="Transparent"
                                                    ClickMode="Press"
                                                    IsChecked="{Binding IsExpanded, Mode=OneWay}"
                                                    IsHitTestVisible="False"
                                                    Style="{StaticResource LibraryExpandCollapseToggleStyle}">
                                                    <ToggleButton.Margin>
                                                        <Binding Converter="{StaticResource FullCategoryNameToMarginConverter}" Path="FullCategoryName" />
                                                    </ToggleButton.Margin>
                                                </ToggleButton>

                                                <ContentPresenter
                                                    x:Name="NestedPART_Header"
                                                    Grid.Column="1"
                                                    VerticalAlignment="Center"
                                                    ContentSource="Header" />

                                                <TextBlock
                                                    x:Name="ElementTypeText"
                                                    Grid.Column="2"
                                                    Margin="0,0,10,0"
                                                    HorizontalAlignment="Right"
                                                    VerticalAlignment="Center"
                                                    Text="{Binding Path=ElementType, Converter={StaticResource ElementTypeToShortConverter}}"
                                                    TextBlock.FontSize="10"
                                                    TextBlock.Foreground="{StaticResource NestedMemberTextColor}">
                                                    <TextBlock.Style>
                                                        <Style TargetType="{x:Type TextBlock}">
                                                            <Setter Property="Visibility" Value="Collapsed" />
                                                            <Style.Triggers>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}}" Value="True" />
                                                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=DataContext, Converter={StaticResource RootElementToBoolConverter}}" Value="True" />
                                                                    </MultiDataTrigger.Conditions>
                                                                    <MultiDataTrigger.Setters>
                                                                        <Setter Property="Visibility" Value="Visible" />
                                                                    </MultiDataTrigger.Setters>
                                                                </MultiDataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </TextBlock.Style>
                                                </TextBlock>


                                            </Grid>

                                            <Border.Style>
                                                <Style TargetType="{x:Type Border}">
                                                    <Style.Triggers>

                                                        <!--  Root element & mouse over => dark grey + light border at the bottom.  -->
                                                        <MultiDataTrigger>
                                                            <MultiDataTrigger.Conditions>
                                                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                                                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=DataContext, Converter={StaticResource RootElementToBoolConverter}}" Value="True" />
                                                            </MultiDataTrigger.Conditions>
                                                            <MultiDataTrigger.Setters>
                                                                <Setter Property="BorderThickness" Value="0,0,0,1" />
                                                                <Setter Property="Background" Value="{StaticResource RootElementOnHover}" />
                                                            </MultiDataTrigger.Setters>
                                                        </MultiDataTrigger>
                                                        <!--  Uncomment this if the tree view item need a different background color  -->
                                                        <!--  Usual element & mouse over => light grey.  -->
                                                        <!--<MultiDataTrigger>
                                                            <MultiDataTrigger.Conditions>
                                                                <Condition Binding="{Binding RelativeSource={RelativeSource Self},
                                                                                     Path=IsMouseOver}"
                                                                           Value="True" />
                                                                <Condition Binding="{Binding RelativeSource={RelativeSource Self},
                                                                                     Path=DataContext,
                                                                                     Converter={StaticResource RootElementToBoolConverter}}"
                                                                           Value="False" />
                                                            </MultiDataTrigger.Conditions>
                                                            <MultiDataTrigger.Setters>
                                                                <Setter Property="Background"
                                                                        Value="{StaticResource LibraryMemberOnHover}" />
                                                            </MultiDataTrigger.Setters>
                                                        </MultiDataTrigger>-->

                                                        <!--  Usual element & mouse not over => grey.  -->
                                                        <MultiDataTrigger>
                                                            <MultiDataTrigger.Conditions>
                                                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="False" />
                                                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=DataContext, Converter={StaticResource RootElementToBoolConverter}}" Value="False" />
                                                            </MultiDataTrigger.Conditions>
                                                            <MultiDataTrigger.Setters>
                                                                <Setter Property="Background" Value="{StaticResource LibraryItemHostBackground}" />
                                                            </MultiDataTrigger.Setters>
                                                        </MultiDataTrigger>

                                                        <!--  Root element & mouse not over => dark dark grey + light border at the bottom.  -->
                                                        <MultiDataTrigger>
                                                            <MultiDataTrigger.Conditions>
                                                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="False" />
                                                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=DataContext, Converter={StaticResource RootElementToBoolConverter}}" Value="True" />
                                                            </MultiDataTrigger.Conditions>
                                                            <MultiDataTrigger.Setters>
                                                                <Setter Property="BorderThickness" Value="0,0,0,1" />
                                                                <Setter Property="Background" Value="{StaticResource RootElementBackground}" />
                                                            </MultiDataTrigger.Setters>
                                                        </MultiDataTrigger>

                                                    </Style.Triggers>
                                                </Style>
                                            </Border.Style>
                                        </Border>

                                        <Border Grid.Row="1" Background="{StaticResource LibraryItemHostBackground}">
                                            <ItemsPresenter x:Name="ItemsHost">
                                                <ItemsPresenter.Visibility>
                                                    <Binding Converter="{StaticResource LibraryTreeItemsHostVisibilityConverter}" />
                                                </ItemsPresenter.Visibility>

                                                <ItemsPresenter.Style>
                                                    <Style TargetType="{x:Type ItemsPresenter}">
                                                        <Setter Property="Margin" Value="0,0,0,0" />
                                                        <Style.Triggers>
                                                            <DataTrigger Value="True">
                                                                <DataTrigger.Binding>
                                                                    <Binding
                                                                        Converter="{StaticResource RootElementToBoolConverter}"
                                                                        Path="DataContext"
                                                                        RelativeSource="{RelativeSource Self}" />
                                                                </DataTrigger.Binding>
                                                                <Setter Property="Margin" Value="0,3,0,3" />
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </ItemsPresenter.Style>

                                            </ItemsPresenter>
                                        </Border>
                                    </Grid>
                                </Border>
                            </Button>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsExpanded" Value="false">
                                    <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
                                    <!--<Setter Property="Margin"
                                            TargetName="VerLn"
                                            Value="{Binding Path=Margin,
                                            Converter={StaticResource TreeViewVLineMarginConverter},
                                            ConverterParameter=0,
                                            ElementName=VerLn}">
                                    </Setter>-->
                                </Trigger>

                                <Trigger Property="IsExpanded" Value="True">
                                    <!--<Setter Property="Margin"
                                            TargetName="VerLn"
                                            Value="{Binding Path=Margin,
                                            Converter={StaticResource TreeViewVLineMarginConverter},
                                            ConverterParameter=15,
                                            ElementName=VerLn}">
                                    </Setter>-->
                                </Trigger>

                                <Trigger Property="HasItems" Value="false">
                                    <Setter TargetName="Expander" Property="Visibility" Value="Collapsed" />
                                    <Setter TargetName="VerLn" Property="Visibility" Value="Collapsed" />
                                    <Setter TargetName="HorLn" Property="Visibility" Value="Collapsed" />
                                </Trigger>

                                <Trigger Property="HasItems" Value="True">
                                    <Setter TargetName="NestedPART_Header" Property="Margin" Value="{Binding Path=Margin, ElementName=Expander, Converter={StaticResource NestedContentMarginConverter}}" />
                                </Trigger>


                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Converter={StaticResource TreeViewLineConverter}}" Value="true">
                                    <Setter TargetName="VerLn" Property="Height" Value="17" />
                                    <Setter TargetName="VerLn" Property="VerticalAlignment" Value="Top" />
                                </DataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsChecked, ElementName=Expander}" Value="True" />
                                        <Condition Binding="{Binding ElementName=VerLn, Path=Margin, Converter={StaticResource TreeViewMarginCheck}}" Value="True" />
                                    </MultiDataTrigger.Conditions>
                                    <MultiDataTrigger.Setters>
                                        <Setter TargetName="VerLn" Property="Margin" Value="{Binding Path=Margin, Converter={StaticResource TreeViewVLineMarginConverter}, ConverterParameter=15, ElementName=VerLn}" />
                                    </MultiDataTrigger.Setters>
                                </MultiDataTrigger>

                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsExpanded, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TreeViewItem}}}" Value="True" />
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Converter={StaticResource TreeViewLineConverter}}" Value="True" />
                                    </MultiDataTrigger.Conditions>
                                    <MultiDataTrigger.Setters>
                                        <Setter Property="Margin" Value="{Binding ElementName=OuterButtongrid, Converter={StaticResource ClassViewMarginConverter}}" />
                                    </MultiDataTrigger.Setters>
                                </MultiDataTrigger>

                                <!--<DataTrigger Binding="{Binding IsChecked, ElementName=Expander}" Value="True" >
                                    <Setter Property="Margin"
                                            TargetName="VerLn"
                                            Value="{Binding Path=Margin,
                                            Converter={StaticResource TreeViewVLineMarginConverter},
                                            ConverterParameter=15,
                                            ElementName=VerLn}">
                                    </Setter>
                                </DataTrigger>-->

                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>

                <EventSetter Event="MouseEnter" Handler="OnMemberMouseEnter" />
                <EventSetter Event="MouseLeave" Handler="OnPopupMouseLeave" />
            </Style>



            <!--  Region DataContext Templates  -->

            <!--  This data template is used to show single member.  -->
            <HierarchicalDataTemplate x:Key="MemberControlTemplate" ItemsSource="{Binding TreeViewItems}">

                <StackPanel
                    Name="ImageAndNodeName"
                    Width="70"
                    Height="70"
                    VerticalAlignment="Center"
                    Orientation="Vertical">
                    <Image
                        Name="SmallIcon"
                        Width="24"
                        Height="36"
                        Margin="2,0,16,0"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Center"
                        Source="{Binding SmallIcon}" />
                    <TextBlock
                        Name="memberName"
                        Margin="5,0,0,0"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Center"
                        FontSize="13"
                        Foreground="{StaticResource CommonSidebarTextColor}"
                        Text="{Binding Name}" />
                    <StackPanel.Style>
                        <Style TargetType="{x:Type StackPanel}">
                            <Setter Property="Background" Value="Transparent" />


                            <Style.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="{StaticResource LibraryMemberOnHover}" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </StackPanel.Style>
                </StackPanel>

            </HierarchicalDataTemplate>

            <DataTemplate x:Key="ClassDetailsDataTemplate">
                <uicontrols:ClassInformationView />
            </DataTemplate>

            <!--  This data template is used to show one subcategory.  -->
            <HierarchicalDataTemplate
                x:Key="ClassObjectDataTemplate"
                ItemTemplate="{StaticResource ClassDetailsDataTemplate}"
                ItemsSource="{Binding TreeViewItems}">
                <Grid Name="InternalGrid">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <StackPanel
                        Name="SubClassTreeNodes"
                        Grid.Row="0"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Center"
                        Orientation="Horizontal">
                        <!--<Image Margin="0,0,16,0"
                               Height="36"
                               Width="24"
                               HorizontalAlignment="Left"
                               VerticalAlignment="Center"
                               Source="{Binding SmallIcon}" />-->
                        <TextBlock
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            FontSize="13"
                            Foreground="{StaticResource NestedMemberTextColor}"
                            Text="{Binding Name}" />
                        <StackPanel.Style>
                            <Style TargetType="{x:Type StackPanel}">
                                <Setter Property="Background" Value="Transparent" />

                                <Style.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Background" Value="{StaticResource LibraryMemberOnHover}" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </StackPanel.Style>
                    </StackPanel>
                </Grid>
            </HierarchicalDataTemplate>

            <!--  This data template is used to show the list of subcategories.  -->
            <HierarchicalDataTemplate x:Key="SubclassesTemplate">
                <TreeView
                    Name="SubCategoryListView"
                    HorizontalAlignment="Stretch"
                    HorizontalContentAlignment="Stretch"
                    Background="{StaticResource LibraryItemHostBackground}"
                    BorderThickness="0"
                    FocusManager.IsFocusScope="true"
                    ItemContainerStyle="{StaticResource ClassTreeViewItem}"
                    ItemTemplate="{StaticResource ClassObjectDataTemplate}"
                    ItemsSource="{Binding Items}"
                    ScrollViewer.CanContentScroll="False"
                    ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                    ScrollViewer.IsDeferredScrollingEnabled="False"
                    ScrollViewer.VerticalScrollBarVisibility="Hidden" />

            </HierarchicalDataTemplate>

            <!--  Used for nested categories. E.g. nodes stucture for Revit root.  -->
            <HierarchicalDataTemplate
                x:Key="NestedCategoryTemplate"
                ItemContainerStyle="{StaticResource ClassTreeViewItem}"
                ItemsSource="{Binding Path=Items}">
                <TextBlock
                    Name="CategoryName"
                    HorizontalAlignment="Left"
                    FontSize="13"
                    Foreground="{StaticResource NestedMemberTextColor}"
                    Text="{Binding Path=Name}">
                    <TextBlock.Style>
                        <Style>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsExpanded, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TreeViewItem}}}" Value="True">
                                    <Setter Property="TextBlock.FontWeight" Value="SemiBold" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>
            </HierarchicalDataTemplate>

            <!--  EndRegion  -->

            <!--  Region Selectors  -->
            <controls:LibraryTreeTemplateSelector
                x:Key="LibraryTreeTemplateSelector"
                MemberTemplate="{StaticResource MemberControlTemplate}"
                NestedCategoryTemplate="{StaticResource NestedCategoryTemplate}"
                SubclassesTemplate="{StaticResource SubclassesTemplate}" />

            <!--  EndRegion  -->

            <!--  Region Styles  -->

            <!--  Region CategoriesTreeView  -->



            <Style x:Key="LibraryTreeView" TargetType="{x:Type TreeView}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TreeView}">
                            <Border
                                x:Name="TreeBorder"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                                <ItemsPresenter />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--  EndRegion  -->

            <Style x:Key="AddButtonContextMenu" TargetType="{x:Type ContextMenu}">
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="HasDropShadow" Value="False" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ContextMenu}">
                            <Border
                                x:Name="Border"
                                Padding="1,5,1,5"
                                Background="#414141">
                                <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Resources>
                    <Style
                        x:Key="{x:Type MenuItem}"
                        BasedOn="{StaticResource MenuItemStyle}"
                        TargetType="MenuItem" />
                </Style.Resources>
            </Style>

            <!--  EndRegion  -->

        </ResourceDictionary>
    </UserControl.Resources>
    <Grid Name="LibraryGrid">
        <ScrollViewer
            Name="ScrollLibraryViewer"
            Background="Transparent"
            CanContentScroll="True"
            PreviewMouseWheel="OnPreviewMouseWheel"
            Style="{DynamicResource LibraryScrollViewerStyle}"
            Template="{DynamicResource LibraryScrollViewerControlTemplate}">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="auto" />
                </Grid.RowDefinitions>
                <TreeView
                    Name="CategoryTreeView"
                    HorizontalContentAlignment="Stretch"
                    FocusManager.IsFocusScope="true"
                    ItemContainerStyle="{StaticResource LibraryTreeViewItem}"
                    ItemTemplateSelector="{StaticResource LibraryTreeTemplateSelector}"
                    ItemsSource="{Binding LibraryRootCategories}"
                    TreeViewItem.Expanded="OnTreeViewItemExpanded">

                    <TreeView.Template>
                        <ControlTemplate>
                            <ItemsPresenter />
                        </ControlTemplate>
                    </TreeView.Template>

                </TreeView>

            </Grid>
        </ScrollViewer>

        <uicontrols:LibraryToolTipPopup
            x:Name="libraryToolTipPopup"
            AllowsTransparency="True"
            MouseLeave="OnPopupMouseLeave"
            StaysOpen="True" />
    </Grid>
</UserControl>
