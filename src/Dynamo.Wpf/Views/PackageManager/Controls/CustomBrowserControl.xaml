<UserControl
    x:Class="Dynamo.PackageManager.UI.CustomBrowserControl"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:Dynamo.PackageManager.UI"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:p="clr-namespace:Dynamo.Wpf.Properties"
    xmlns:ui="clr-namespace:Dynamo.UI"
    d:DesignHeight="450"
    d:DesignWidth="800"
    mc:Ignorable="d">
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Dynamo.Wpf;component/Themes/Modern/DynamoModern.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Stroke" Color="Transparent" />
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Fill" Color="#DCDCDC" />
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Stroke" Color="Transparent" />
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Fill" Color="#FFCCEEFB" />
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Stroke" Color="Transparent" />
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Fill" Color="#DCDCDC" />
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Stroke" Color="Transparent" />
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Fill" Color="#FF82DFFB" />
            <SolidColorBrush x:Key="StrokeBrush" Color="#696969" />

            <PathGeometry x:Key="TreeArrow" Figures="M 0 0 L 0 7.2 L 4.8 3.6 Z" />

            <!--  Folder toggle  -->
            <Style x:Key="FolderToggleStyle" TargetType="{x:Type ToggleButton}">
                <Setter Property="Focusable" Value="False" />
                <Setter Property="Width" Value="16" />
                <Setter Property="Height" Value="16" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border
                                Width="16"
                                Height="16"
                                Padding="7,5,0,0"
                                Background="Transparent">
                                <Canvas>
                                    <Path
                                        x:Name="ExpandPath"
                                        Data="{StaticResource TreeArrow}"
                                        Fill="{StaticResource TreeViewItem.TreeArrow.Static.Fill}"
                                        Stroke="{StaticResource TreeViewItem.TreeArrow.Static.Stroke}">
                                        <Path.RenderTransform>
                                            <RotateTransform Angle="0" CenterX="3" CenterY="3" />
                                        </Path.RenderTransform>
                                    </Path>
                                </Canvas>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="ExpandPath" Property="RenderTransform">
                                        <Setter.Value>
                                            <RotateTransform Angle="90" CenterX="2" CenterY="4" />
                                        </Setter.Value>
                                    </Setter>
                                    <Setter TargetName="ExpandPath" Property="Fill" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Fill}" />
                                    <Setter TargetName="ExpandPath" Property="Stroke" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Stroke}" />
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="ExpandPath" Property="Stroke" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Stroke}" />
                                    <Setter TargetName="ExpandPath" Property="Fill" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Fill}" />
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="True" />
                                        <Condition Property="IsChecked" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="ExpandPath" Property="Stroke" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Stroke}" />
                                    <Setter TargetName="ExpandPath" Property="Fill" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Fill}" />
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--  Tree view style  -->
            <SolidColorBrush x:Key="ListBorder" Color="#828790" />
            <Style x:Key="TreeViewStyle" TargetType="{x:Type TreeView}">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderBrush" Value="{StaticResource ListBorder}" />
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="Padding" Value="1" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
                <Setter Property="ScrollViewer.PanningMode" Value="Both" />
                <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="UseLayoutRounding" Value="True" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TreeView}">
                            <Border
                                x:Name="Bd"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                SnapsToDevicePixels="true">
                                <ScrollViewer
                                    x:Name="_tv_scrollviewer_"
                                    Padding="{TemplateBinding Padding}"
                                    Background="{TemplateBinding Background}"
                                    CanContentScroll="false"
                                    Focusable="false"
                                    HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                    VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                                    <ItemsPresenter />
                                </ScrollViewer>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter TargetName="Bd" Property="Background" Value="#343434" />
                                </Trigger>
                                <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                                    <Setter TargetName="_tv_scrollviewer_" Property="CanContentScroll" Value="true" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                        <Setter Property="ItemsPanel">
                            <Setter.Value>
                                <ItemsPanelTemplate>
                                    <VirtualizingStackPanel />
                                </ItemsPanelTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Background" Value="#343434" />
                    </Trigger>
                </Style.Triggers>
            </Style>

            <!--#region CheckBox-->
            <!--  CheckBox Style  -->
            <Style x:Key="FocusVisual">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Rectangle
                                Margin="2"
                                SnapsToDevicePixels="true"
                                Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                StrokeDashArray="1 2"
                                StrokeThickness="1" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="OptionMarkFocusVisual">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Rectangle
                                Margin="14,0,0,0"
                                SnapsToDevicePixels="true"
                                Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                StrokeDashArray="1 2"
                                StrokeThickness="1" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <SolidColorBrush x:Key="OptionMark.Static.Background" Color="#FFFFFFFF" />
            <SolidColorBrush x:Key="OptionMark.Static.Border" Color="#FF707070" />
            <SolidColorBrush x:Key="OptionMark.Static.Glyph" Color="#FF212121" />
            <SolidColorBrush x:Key="OptionMark.MouseOver.Background" Color="#FFF3F9FF" />
            <SolidColorBrush x:Key="OptionMark.MouseOver.Border" Color="#FF5593FF" />
            <SolidColorBrush x:Key="OptionMark.MouseOver.Glyph" Color="#FF212121" />
            <SolidColorBrush x:Key="OptionMark.Pressed.Background" Color="#FFD9ECFF" />
            <SolidColorBrush x:Key="OptionMark.Pressed.Border" Color="#FF3C77DD" />
            <SolidColorBrush x:Key="OptionMark.Pressed.Glyph" Color="#FF212121" />
            <SolidColorBrush x:Key="OptionMark.Disabled.Background" Color="#FFE6E6E6" />
            <SolidColorBrush x:Key="OptionMark.Disabled.Border" Color="#FFBCBCBC" />
            <SolidColorBrush x:Key="OptionMark.Disabled.Glyph" Color="#FF707070" />

            <Style x:Key="CheckBoxStyle" TargetType="{x:Type CheckBox}">
                <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
                <Setter Property="Background" Value="{StaticResource OptionMark.Static.Background}" />
                <Setter Property="BorderBrush" Value="{StaticResource OptionMark.Static.Border}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type CheckBox}">
                            <Grid
                                x:Name="templateRoot"
                                Background="Transparent"
                                SnapsToDevicePixels="True">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <Border
                                    x:Name="checkBoxBorder"
                                    Width="12"
                                    Height="12"
                                    Margin="0"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}">
                                    <Grid x:Name="markGrid">
                                        <Path
                                            x:Name="optionMark"
                                            Margin="1"
                                            Data="M 0.387 4.6521 L 1.6793 3.3598 L 3.2327 4.6984 L 6.5682 1.0353 L 7.9158 2.2623 L 3.3863 7.2367 L 0.387 4.6521 Z"
                                            Fill="{StaticResource OptionMark.Static.Glyph}"
                                            Opacity="0"
                                            Stretch="None" />
                                        <Rectangle
                                            x:Name="indeterminateMark"
                                            Margin="2"
                                            Fill="{StaticResource OptionMark.Static.Glyph}"
                                            Opacity="0" />
                                    </Grid>
                                </Border>
                                <ContentPresenter
                                    x:Name="contentPresenter"
                                    Grid.Column="1"
                                    Margin="{TemplateBinding Padding}"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Focusable="False"
                                    RecognizesAccessKey="True"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="HasContent" Value="true">
                                    <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}" />
                                    <Setter Property="Padding" Value="4,-1,0,0" />
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter TargetName="checkBoxBorder" Property="Background" Value="{StaticResource OptionMark.MouseOver.Background}" />
                                    <Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{StaticResource OptionMark.MouseOver.Border}" />
                                    <Setter TargetName="optionMark" Property="Fill" Value="{StaticResource OptionMark.MouseOver.Glyph}" />
                                    <Setter TargetName="indeterminateMark" Property="Fill" Value="{StaticResource OptionMark.MouseOver.Glyph}" />
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter TargetName="checkBoxBorder" Property="Background" Value="{StaticResource OptionMark.Disabled.Background}" />
                                    <Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{StaticResource OptionMark.Disabled.Border}" />
                                    <Setter TargetName="optionMark" Property="Fill" Value="{StaticResource OptionMark.Disabled.Glyph}" />
                                    <Setter TargetName="indeterminateMark" Property="Fill" Value="{StaticResource OptionMark.Disabled.Glyph}" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter TargetName="checkBoxBorder" Property="Background" Value="{StaticResource OptionMark.Pressed.Background}" />
                                    <Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{StaticResource OptionMark.Pressed.Border}" />
                                    <Setter TargetName="optionMark" Property="Fill" Value="{StaticResource OptionMark.Pressed.Glyph}" />
                                    <Setter TargetName="indeterminateMark" Property="Fill" Value="{StaticResource OptionMark.Pressed.Glyph}" />
                                </Trigger>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter TargetName="optionMark" Property="Opacity" Value="1" />
                                    <Setter TargetName="indeterminateMark" Property="Opacity" Value="0" />
                                    <Setter Property="Visibility" Value="Visible" />
                                </Trigger>
                                <Trigger Property="IsChecked" Value="{x:Null}">
                                    <Setter TargetName="optionMark" Property="Opacity" Value="0" />
                                    <Setter TargetName="indeterminateMark" Property="Opacity" Value="1" />
                                    <Setter Property="Visibility" Value="Hidden" />
                                </Trigger>
                                <Trigger Property="IsChecked" Value="False">
                                    <Setter Property="Visibility" Value="Hidden" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <!--#endregion-->

            <!--  https://stackoverflow.com/questions/61217523/wpf-treeview-how-to-make-controls-align-relative-to-every-treeviewitem-yet-sti  -->
            <local:IndentConverter x:Key="IndentConverter" />
            <local:HasChildrenToVisibilityConverter x:Key="HasChildrenToVisibilityConverter" />
            <local:DependencyTypeToVisibilityConverter x:Key="DependencyTypeToVisibilityConverter" />
            <local:SortingConverter x:Key="SortingConverter" />
            <local:ChildrenItemsContainsFolderToVisibilityConverter x:Key="ChildrenItemsContainsFolderToVisibilityConverter" />

            <ControlTemplate x:Key="TreeViewItemControlTemplate1" TargetType="{x:Type TreeViewItem}">
                <Grid x:Name="tvGrid">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" MinWidth="19" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="24" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="30" />
                        <RowDefinition />
                    </Grid.RowDefinitions>

                    <!--  Selection border  -->
                    <Border
                        x:Name="SelectionBorder"
                        Grid.Column="0"
                        Grid.ColumnSpan="5"
                        Background="Transparent"
                        Opacity="0.1" />

                    <!--  Vertical dash line and sets the indent  -->
                    <Border
                        Grid.RowSpan="2"
                        Grid.Column="0"
                        Width="{Binding Path=(local:TreeViewItemHelper.Indent).Value, Mode=OneWay, RelativeSource={RelativeSource AncestorType=ItemsPresenter}}"
                        VerticalAlignment="Stretch">
                        <Rectangle
                            x:Name="VerticalMarker"
                            Width="1"
                            Height="Auto"
                            Margin="0,-8,0,14"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Stretch"
                            SnapsToDevicePixels="True"
                            Stroke="{StaticResource StrokeBrush}"
                            StrokeDashArray="1,2.3"
                            StrokeThickness="3"
                            UseLayoutRounding="True" />
                    </Border>

                    <!--  Horizontal dash line  -->
                    <Border Grid.Column="1">
                        <Rectangle
                            x:Name="HorizontalMarker"
                            Width="18"
                            Height="1"
                            Margin="-1,3,0,0"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Stroke="{StaticResource StrokeBrush}"
                            StrokeDashArray="1,3,1,2"
                            StrokeThickness="3"
                            Visibility="Visible" />
                    </Border>

                    <!--  Arrow expander  -->
                    <ToggleButton
                        x:Name="Expander"
                        Grid.Column="2"
                        Margin="-15,0,0,0"
                        ClickMode="Press"
                        IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                        Style="{StaticResource FolderToggleStyle}"
                        Visibility="{Binding ChildItems, Converter={StaticResource ChildrenItemsContainsFolderToVisibilityConverter}}" />
                    <!--  Content presenter  -->
                    <Border
                        x:Name="Bd"
                        Grid.Column="3"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="True">

                        <Grid>
                            <ContentPresenter
                                x:Name="PART_Header"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="Center"
                                Content="{TemplateBinding Header}"
                                ContentSource="Header"
                                ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                ContentTemplate="{TemplateBinding HeaderTemplate}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                        </Grid>
                    </Border>

                    <!--  Garbage icon remove item button  -->
                    <Grid
                        Grid.Column="4"
                        Margin="0,0,8,0"
                        HorizontalAlignment="Right">
                        <Button
                            x:Name="RemoveButton"
                            Margin="2"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            BorderThickness="0"
                            Click="RemoveButton_Click"
                            Cursor="Hand"
                            Visibility="Hidden">
                            <Button.ToolTip>
                                <ToolTip Content="{x:Static p:Resources.PublishPackageRemoveFromPacakgeTooltip}" Style="{StaticResource GenericToolTipLight}" />
                            </Button.ToolTip>
                            <Button.Template>
                                <ControlTemplate TargetType="Button">
                                    <Border Background="Transparent">
                                        <Viewbox
                                            Width="14"
                                            Height="14"
                                            VerticalAlignment="Center">
                                            <Path
                                                x:Name="Folder"
                                                Data="M5 2H2V4H14V2H11V0H5V2ZM10 2H6V1.5C6 1.22386 6.22386 1 6.5 1H9.5C9.77614 1 10 1.22386 10 1.5V2ZM13 5H3V16H13V5Z"
                                                Fill="#999999"
                                                StrokeThickness="0" />
                                        </Viewbox>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter TargetName="Folder" Property="Fill" Value="#6AC0E7" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Button.Template>
                        </Button>

                    </Grid>

                    <ItemsPresenter
                        x:Name="ItemsHost"
                        Grid.Row="1"
                        Grid.Column="0"
                        Grid.ColumnSpan="5"
                        local:TreeViewItemHelper.Indent="{Binding Path=(local:TreeViewItemHelper.Indent), Mode=OneWay, RelativeSource={RelativeSource AncestorType=ItemsPresenter}, Converter={StaticResource IndentConverter}}" />
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsExpanded" Value="False">
                        <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
                    </Trigger>
                    <Trigger Property="IsSelected" Value="True">
                        <Setter TargetName="Bd" Property="Background" Value="Transparent" />
                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        <Setter TargetName="RemoveButton" Property="Visibility" Value="Visible" />
                        <Setter TargetName="SelectionBorder" Property="Background" Value="#F5F5F5" />
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="local:MyTreeViewHelper.IsMouseDirectlyOverItem" Value="True" />
                        </MultiTrigger.Conditions>
                        <Setter TargetName="RemoveButton" Property="Visibility" Value="Visible" />
                        <Setter TargetName="SelectionBorder" Property="Background" Value="#F5F5F5" />
                    </MultiTrigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        <Setter TargetName="RemoveButton" Property="Visibility" Value="Hidden" />
                        <Setter TargetName="Bd" Property="Background" Value="#343434" />
                        <Setter TargetName="SelectionBorder" Property="Background" Value="#343434" />
                    </Trigger>
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=UserControl}, Path=DisableRemove}" Value="True">
                        <Setter TargetName="RemoveButton" Property="Visibility" Value="Hidden" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=UserControl}, Path=Tag}" Value="True">
                        <Setter TargetName="RemoveButton" Property="Visibility" Value="Hidden" />
                    </DataTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <Style x:Key="CustomTreeViewItem" TargetType="TreeViewItem">
                <Setter Property="Template" Value="{DynamicResource TreeViewItemControlTemplate1}" />
                <Setter Property="IsExpanded" Value="True" />
                <Setter Property="FontSize" Value="12" />
                <Setter Property="Foreground" Value="#F5F5F5" />
                <Style.Triggers>
                    <DataTrigger Binding="{Binding DependencyType, Converter={StaticResource DependencyTypeToVisibilityConverter}, ConverterParameter=Folder}" Value="Collapsed">
                        <Setter Property="Visibility" Value="Collapsed" />
                    </DataTrigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Foreground" Value="#F5F5F5" />
                        <Setter Property="IsSelected" Value="False" />
                    </Trigger>
                </Style.Triggers>
            </Style>

        </ResourceDictionary>
    </UserControl.Resources>
    <Grid>
        <!--  Folders  -->
        <TreeView
            x:Name="customTreeView"
            Margin="0"
            ItemContainerStyle="{StaticResource CustomTreeViewItem}"
            ItemsSource="{Binding RelativeSource={RelativeSource AncestorType=UserControl}, Path=Root, Mode=OneWay}"
            SelectedItemChanged="customTreeView_SelectedItemChanged"
            Style="{DynamicResource TreeViewStyle}">
            <TreeView.ItemTemplate>
                <HierarchicalDataTemplate DataType="{x:Type local:PackageItemRootViewModel}" ItemsSource="{Binding ChildItems, Converter={StaticResource SortingConverter}, ConverterParameter=DisplayName}">
                    <TextBlock
                        MaxWidth="180"
                        FontFamily="宋体"
                        FontSize="14"
                        SnapsToDevicePixels="True"
                        Text="{Binding DisplayName}"
                        TextTrimming="CharacterEllipsis"
                        UseLayoutRounding="True" />
                </HierarchicalDataTemplate>
            </TreeView.ItemTemplate>
        </TreeView>
    </Grid>
</UserControl>
